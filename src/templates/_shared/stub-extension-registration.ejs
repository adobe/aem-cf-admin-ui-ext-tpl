/*
 * <license header>
 */

<% if (
        extensionManifest.actionBarButtons && (extensionManifest.actionBarButtons.filter(button => button.needsModal)).length ||
        extensionManifest.headerMenuButtons && (extensionManifest.headerMenuButtons.filter(button => button.needsModal)).length
) { %>
import { generatePath } from "react-router";
<% } %>
import { Text } from "@adobe/react-spectrum";
import { register } from "@adobe/uix-guest";
import { extensionId } from "./Constants";
import metadata from '../../../../app-metadata.json';

function ExtensionRegistration() {
  const init = async () => {
    const guestConnection = await register({
      id: extensionId,
      metadata,
      methods: {
        <%_ if (
                extensionManifest.actionBarButtons ||
                extensionManifest.headerMenuButtons ||
                extensionManifest.headerMenuButtonsDelete ||
                extensionManifest.actionBarButtonsDelete
        ) { -%>
          <%_ if (extensionManifest.actionBarButtons || extensionManifest.actionBarButtonsDelete) { -%>
        actionBar: {
          <%_ if (extensionManifest.actionBarButtons) { -%>
          getButtons() {
            return [
              // YOUR ACTION BAR BUTTONS CODE SHOULD BE HERE
              <%_ extensionManifest.actionBarButtons.forEach((button) => { -%>
              {
                'id': '<%- button.id %>',
                'label': '<%- button.label %>',
                'icon': 'PublishCheck',
                onClick(selections) {
                <%_ if (button.needsModal) { -%>
                  const modalURL = "/index.html#" + generatePath("/content-fragment/:fragmentId/<%- button.id %>-modal", {
                    fragmentId: encodeURIComponent(selections[0].id),
                  });
                  console.log("Modal URL: ", modalURL);

                  guestConnection.host.modal.showUrl({
                    title: "<%- button.label %>",
                    url: modalURL,
                  });
                <%_ } -%>
                },
              },
              <%_ }) -%>
            ];
          },
          <%_ } -%>
          <%_ if (extensionManifest.actionBarButtonsDelete) { -%>
          deleteButtons() {
            return [
              <%_ extensionManifest.actionBarButtonsDelete.forEach((button) => { -%>
              {
                'id': '<%- button.id %>',
              },
              <%_ }) -%>
            ];
          },
          <%_ } -%>
        },
        <%_ } -%>
          <%_ if (extensionManifest.headerMenuButtons || extensionManifest.headerMenuButtonsDelete) { -%>
        headerMenu: {
          <%_ if (extensionManifest.headerMenuButtons) { -%>
          getButtons() {
            return [
              // YOUR HEADER BUTTONS CODE SHOULD BE HERE
              <%_ extensionManifest.headerMenuButtons.forEach((button) => { -%>
              {
                'id': '<%- button.id %>',
                'label': '<%- button.label %>',
                'icon': 'OpenIn',
                onClick() {
                <%_ if (button.needsModal) { -%>
                  const modalURL = "/index.html#/<%- button.id %>-modal";
                  console.log("Modal URL: ", modalURL);

                  guestConnection.host.modal.showUrl({
                    title: "<%- button.label %>",
                    url: modalURL,
                  });
                <%_ } -%>
                },
              },
              <%_ }) -%>
            ];
          },
          <%_ } -%>
          <%_ if (extensionManifest.headerMenuButtonsDelete) { -%>
          deleteButtons() {
            return [
              <%_ extensionManifest.headerMenuButtonsDelete.forEach((button) => { -%>
              {
                'id': '<%- button.id %>',
              },
              <%_ }) -%>
            ];
          },
          <%_ } -%>
        },
          <%_ }} -%>
      },
    });
  };
  init().catch(console.error);

  return <Text>IFrame for integration with Host (AEM)...</Text>
}

export default ExtensionRegistration;
